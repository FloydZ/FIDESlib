diff --git a/src/core/include/lattice/hal/default/dcrtpoly.h b/src/core/include/lattice/hal/default/dcrtpoly.h
index 2cf18e26..4c5ddbbe 100644
--- a/src/core/include/lattice/hal/default/dcrtpoly.h
+++ b/src/core/include/lattice/hal/default/dcrtpoly.h
@@ -391,7 +391,7 @@ public:
         m_vectors[index] = std::move(element);
     }
 
-protected:
+public:
     std::shared_ptr<Params> m_params{std::make_shared<DCRTPolyImpl::Params>()};
     Format m_format{Format::EVALUATION};
     std::vector<PolyType> m_vectors;
diff --git a/src/core/include/lattice/hal/default/ildcrtparams.h b/src/core/include/lattice/hal/default/ildcrtparams.h
index cc15bc08..40009ead 100644
--- a/src/core/include/lattice/hal/default/ildcrtparams.h
+++ b/src/core/include/lattice/hal/default/ildcrtparams.h
@@ -352,7 +352,7 @@ public:
         return 1;
     }
 
-protected:
+public:
     std::ostream& doprint(std::ostream& out) const override {
         out << "ILDCRTParams ";
         ElemParams<IntType>::doprint(out);
@@ -362,7 +362,7 @@ protected:
         return out << std::endl;
     }
 
-private:
+public:
     // array of smaller ILParams
     std::vector<std::shared_ptr<ILNativeParams>> m_params;
 };
diff --git a/src/core/include/lattice/hal/default/poly.h b/src/core/include/lattice/hal/default/poly.h
index 547cd992..ea8f1484 100644
--- a/src/core/include/lattice/hal/default/poly.h
+++ b/src/core/include/lattice/hal/default/poly.h
@@ -362,7 +362,7 @@ public:
         return 1;
     }
 
-protected:
+public:
     Format m_format{Format::EVALUATION};
     std::shared_ptr<Params> m_params{nullptr};
     std::unique_ptr<VecType> m_values{nullptr};
diff --git a/src/core/include/lattice/hal/elemparams.h b/src/core/include/lattice/hal/elemparams.h
index 7521b342..6f55fa9f 100644
--- a/src/core/include/lattice/hal/elemparams.h
+++ b/src/core/include/lattice/hal/elemparams.h
@@ -255,7 +255,7 @@ public:
         return 1;
     }
 
-protected:
+public:
     uint32_t m_ringDimension{0};
     uint32_t m_cyclotomicOrder{0};
     IntegerType m_ciphertextModulus{0};
diff --git a/src/core/include/math/hal/intnat/mubintvecnat.h b/src/core/include/math/hal/intnat/mubintvecnat.h
index 17302330..915aba47 100644
--- a/src/core/include/math/hal/intnat/mubintvecnat.h
+++ b/src/core/include/math/hal/intnat/mubintvecnat.h
@@ -119,7 +119,7 @@ bool operator!=(const NAlloc<T>&, const NAlloc<U>&) { return false; }
 template <class IntegerType>
 class NativeVectorT final : public lbcrypto::BigVectorInterface<NativeVectorT<IntegerType>, IntegerType>,
                             public lbcrypto::Serializable {
-private:
+public:
     // m_modulus stores the internal modulus of the vector.
     IntegerType m_modulus{0};
 
diff --git a/src/core/include/math/hal/intnat/ubintnat.h b/src/core/include/math/hal/intnat/ubintnat.h
index 31a55412..3e86f2f0 100644
--- a/src/core/include/math/hal/intnat/ubintnat.h
+++ b/src/core/include/math/hal/intnat/ubintnat.h
@@ -125,7 +125,7 @@ struct DataTypes<uint128_t> {
  */
 template <typename NativeInt>
 class NativeIntegerT final : public lbcrypto::BigIntegerInterface<NativeIntegerT<NativeInt>> {
-private:
+public:
     NativeInt m_value{0};
 
     // variable to store the maximum value of the integral data type.
@@ -1868,7 +1868,7 @@ public:
         return true;
     }
 
-private:
+public:
     // Computes res -= a;
     static void SubtractD(typeD& res, const typeD& a) {
         if (res.lo < a.lo) {
diff --git a/src/pke/include/ciphertext.h b/src/pke/include/ciphertext.h
index 59273b34..f4e026e4 100644
--- a/src/pke/include/ciphertext.h
+++ b/src/pke/include/ciphertext.h
@@ -587,7 +587,7 @@ public:
         return 1;
     }
 
-private:
+public:
     // vector of ring elements for this Ciphertext
     std::vector<Element> m_elements;
 
diff --git a/src/pke/include/cryptocontext.h b/src/pke/include/cryptocontext.h
index 5ec0882e..95d7fc7b 100644
--- a/src/pke/include/cryptocontext.h
+++ b/src/pke/include/cryptocontext.h
@@ -262,7 +262,7 @@ class CryptoContextImpl : public Serializable {
     // cached evalautomorphism keys, by secret key UID
     static std::map<std::string, std::shared_ptr<std::map<uint32_t, EvalKey<Element>>>> s_evalAutomorphismKeyMap;
 
-protected:
+public:
     // crypto parameters
     std::shared_ptr<CryptoParametersBase<Element>> params{nullptr};
     // algorithm used; accesses all crypto methods
diff --git a/src/pke/include/encoding/plaintext.h b/src/pke/include/encoding/plaintext.h
index f451c512..f963274d 100644
--- a/src/pke/include/encoding/plaintext.h
+++ b/src/pke/include/encoding/plaintext.h
@@ -61,7 +61,7 @@ namespace lbcrypto {
  * It provides virtual methods for encoding and decoding of data.
  */
 class PlaintextImpl {
-protected:
+public:
     enum PtxtPolyType { IsPoly, IsDCRTPoly, IsNativePoly };
 
     bool isEncoded{false};
diff --git a/src/pke/include/key/evalkeyrelin.h b/src/pke/include/key/evalkeyrelin.h
index e76ffb39..5bc65f50 100644
--- a/src/pke/include/key/evalkeyrelin.h
+++ b/src/pke/include/key/evalkeyrelin.h
@@ -278,7 +278,7 @@ public:
         return 1;
     }
 
-private:
+public:
     // private member to store vector of vector of Element.
     std::vector<std::vector<Element>> m_rKey;
 
diff --git a/src/pke/include/schemebase/base-cryptoparameters.h b/src/pke/include/schemebase/base-cryptoparameters.h
index 49977728..45882115 100644
--- a/src/pke/include/schemebase/base-cryptoparameters.h
+++ b/src/pke/include/schemebase/base-cryptoparameters.h
@@ -180,7 +180,7 @@ public:
         return 1;
     }
 
-protected:
+public:
     explicit CryptoParametersBase(const PlaintextModulus& plaintextModulus) {
         m_encodingParams = std::make_shared<EncodingParamsImpl>(plaintextModulus);
     }
diff --git a/src/pke/include/schemerns/rns-cryptoparameters.h b/src/pke/include/schemerns/rns-cryptoparameters.h
index 5098325d..36cee4a4 100644
--- a/src/pke/include/schemerns/rns-cryptoparameters.h
+++ b/src/pke/include/schemerns/rns-cryptoparameters.h
@@ -57,7 +57,7 @@ namespace lbcrypto {
 class CryptoParametersRNS : public CryptoParametersRLWE<DCRTPoly> {
     using ParmType = typename DCRTPoly::Params;
 
-protected:
+public:
     CryptoParametersRNS()
         : CryptoParametersRLWE<DCRTPoly>(),
           m_ksTechnique(BV),
@@ -1397,7 +1397,7 @@ public:
         return m_ckksDataType;
     }
 
-protected:
+public:
     /////////////////////////////////////
     // PrecomputeCRTTables
     /////////////////////////////////////
