diff --git a/src/pke/lib/schemebase/base-advancedshe.cpp b/src/pke/lib/schemebase/base-advancedshe.cpp
index b14b5891..81d64832 100644
--- a/src/pke/lib/schemebase/base-advancedshe.cpp
+++ b/src/pke/lib/schemebase/base-advancedshe.cpp
@@ -141,19 +141,19 @@ Ciphertext<Element> AdvancedSHEBase<Element>::AddRandomNoise(ConstCiphertext<Ele
                                                 ciphertext->GetSlots());
     }
     else {
-        DiscreteUniformGeneratorImpl<typename Element::Vector> dug;
-        auto randomVector{dug.GenerateVector(n - 1, encodingParams->GetPlaintextModulus())};
+        // DiscreteUniformGeneratorImpl<typename Element::Vector> dug;
+        // auto randomVector{dug.GenerateVector(n - 1, encodingParams->GetPlaintextModulus())};
 
-        std::vector<int64_t> randomIntVector(n);
+        // std::vector<int64_t> randomIntVector(n);
 
-        // first plaintext slot does not need to change
-        randomIntVector[0] = 0;
+        // // first plaintext slot does not need to change
+        // randomIntVector[0] = 0;
 
-        for (usint i = 0; i < n - 1; i++) {
-            randomIntVector[i + 1] = randomVector[i].ConvertToInt();
-        }
+        // for (usint i = 0; i < n - 1; i++) {
+        //     randomIntVector[i + 1] = randomVector[i].ConvertToInt();
+        // }
 
-        plaintext = cc->MakePackedPlaintext(randomIntVector);
+        // plaintext = cc->MakePackedPlaintext(randomIntVector);
     }
 
     plaintext->Encode();
